前倾回顾

1. 多线程并发模型 基于threading模块
2. 集成模块 socketserver 
3. HTTPServer V2.0
4. 协程： 1. 本质是一个单线程程序，不能使用计算机多核
          2. 但是协程也是一种处理多任务的编程方法
	  3. 在python中是通过将函数变为协程，通过记录执行位置，达到可以在多个函数之间跳转执行的目的
	  4. 这要在IO处理中可以避免阻塞等待，提高效率

5. greenlet ，gevent模块

    gevent.spawn() 生成协程对象
    gevent.joinall()  阻塞等待回收协程
    gevent.sleep()  协程阻塞
******************************************************

from gevent import monkey

monkey.patch_all() 
功能： 运行monkey脚本，使程序中阻塞行为可以被gevent捕获

* 脚本的运行必须在模块导入之前

项目练习

电子词典

功能说明 

1. 用户可以注册和登录

    * 登录需要凭借用户名和密码
    * 注册要求用户必须填写用户名密码，其他内容自定
    * 用户名要求不能重复

2. 用户信息需要长期保存，满足随时登录需要 

    * 所有需要保存数据使用mysql

3. 能够满足多用户同时使用

4. 项目分为客户端和服务端，客户端发起请求展示结果，其他功能服务端完成

5. 客户端启动进入一级界面（print打印），功能：
   登录   注册    退出

   * 注册后可以回到登录界面也可以直接登录

6. 用户登录后进入二级界面，功能：

   查单词    历史记录   注销

   查单词： 可以循环输入单词，返回词义
       提示： 1. 每个单词占一行
              2. 单词是按照顺序排列的
	      3. 单词和解释之间一定有空格

       * 可以用单词本直接查询，也可以先存入数据库
    
   历史记录： 用户可以查看自己查词记录
       记录格式： name     word    time

       * 可以显示所有记录，也可以给最近10个记录

   注销 ： 回到一级界面


1. 确定技术点

   用什么并发？    多进程
   用什么套接字？  tcp
   用什么数据库？  mysql
   查词：文件处理还是数据库查询？

2. 建立数据库，设计数据库
   几个表，干什么？
   表结构？
   表关系？

   用户表： id    name   passwd

   create table user(id int primary key auto_increment,name varchar(32) not null,passwd varchar(16) default '000000');

   历史记录： id   name   word    time

   create table hist(id int primary key auto_increment,name varchar(32) not null,word varchar(32) not null,time varchar(64));

   单词 ： id   word   interpret

    create table words (id int primary key auto_increment,word varchar(32),interpret text);

3. 将数据（单词本）存入数据表

4. 结构设计
   做什么样的封装？  函数

   流程
       *服务端  创建套接字--》创建父子进程 --》 子进程处理客户端请求，父进程等待下一个客户端连接--》 编写子进程处理具体请求
	
       *客户端  创建套接字--》发起连接请求--》进入一级界面--》 发起请求--》登录计入二级界面--》发起请求


5. 完成编写流程

   1. 完成网络通信

   2. 逐个功能实现
      
      注册
          客户端：1. 输入注册信息
	          2. 将信息发送给服务器
		  3. 等待服务器反馈

	  服务端：1. 接收请求
	          2. 判断是否可以注册
		  3. 将结果反馈给客户端
		  4. 将注册信息加入数据库 

      登录
	  客户端：
		1. 输入用户名密码
		2. 将消息发送给服务器
		3. 得到服务器反馈
		4. 进入二级界面

	  服务端：
		1. 接收请求
		2. 判断是否允许登录
		3. 反馈结果

      查词 
	  客户端 ： 1. 发送请求 
	            2. 接收返回结果
		    3. ## 表示结束查词

	  服务端 ： 1. 接收请求
	            2. 查找单词（文本，数据库）
		    3. 反馈结果给客户端
		    4. 插入历史记录

      历史记录
          客户端 ： 1. 发送请求
	            2. 接收反馈结果
	  
	  服务端 ： 1. 接收请求
	            2. 获取历史记录
		    3. 发送给客户端（所有？只10条？）


cookie：

import getpass

passwd = getpass.getpass()
功能： 隐式的输入密码


作业：1. 整理进程线程网络内容
      2. 复习mysql 

周二 ： 1. 将电子词典剩下的功能写完，然后整理
	2. 中期项目
	3. 函数，类，闭包，装饰器，模块调用
